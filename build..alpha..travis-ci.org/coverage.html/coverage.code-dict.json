{"/home/travis/build/npmtest/node-npmtest-meetup-api/test.js":"/* istanbul instrument in package npmtest_meetup_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-meetup-api/lib.npmtest_meetup_api.js":"/* istanbul instrument in package npmtest_meetup_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_meetup_api = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_meetup_api = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-meetup-api/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-meetup-api && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_meetup_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_meetup_api\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_meetup_api.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_meetup_api.rollup.js'] =\n            local.assetsDict['/assets.npmtest_meetup_api.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_meetup_api.__dirname + '/lib.npmtest_meetup_api.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-meetup-api/node_modules/meetup-api/index.js":"exports = module.exports = require('./lib/meetup.js');","/home/travis/build/npmtest/node-npmtest-meetup-api/node_modules/meetup-api/lib/meetup.js":"/*jslint node: true, maxcomplexity: 7 */\r\n'use strict';\r\n/*\r\n    Meetup.js - Node JS Meetup API library\r\n\r\n    This library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n/*\r\n * Module dependencies\r\n */\r\n\r\nvar request = require('superagent'),\r\n    websocket = require('websocket-stream'),\r\n    JSONStream = require('JSONStream'),\r\n    evStream = require('event-stream'),\r\n    URLfn = require('url'),\r\n    util = require('util'),\r\n    endpoints = require('./endpoints.json'),\r\n    packageJSON = require('../package.json'),\r\n    requireOpt = require('./myUtils').requireOpt;\r\n\r\n/*\r\n * Optional module dependencies\r\n */\r\nvar ProxyAgent = requireOpt('proxy-agent'),\r\n    OAuth = requireOpt(['oauth','superagent-oauth'], (modules) => {\r\n        return  modules['superagent-oauth'] && \r\n                (modules['superagent-oauth'](request) || true) && \r\n                modules.oauth || null;\r\n    });\r\n\r\n/*\r\n *  Module private variables\r\n */\r\n\r\nlet MeetupAPIkey,\r\n    ProxyURI;\r\n\r\n/*\r\n * Constructor\r\n *\r\n * @params\r\n *      {key} Meetup API key\r\n *      {oath}{key, secret} Meetup API oauth object\r\n * @return {Object} new instance\r\n */\r\n\r\nclass Meetup {\r\n\r\n    // Meetup contructor\r\n    constructor(params) {\r\n\r\n        // Assign Meetup auth data\r\n        MeetupAPIkey = params && (params.key || params.oauth || null);\r\n        Meetup.oauth = null;\r\n        Meetup.oauth2 = null;\r\n\r\n    }\r\n\r\n    // create metadata properties\r\n    get commands() {\r\n        return Object.freeze(Object.keys(Meetup.prototype)); // delete this\r\n    }\r\n    get version() {\r\n        return Object.freeze(packageJSON.version);\r\n    }\r\n    get name() {\r\n        return Object.freeze(packageJSON.name);\r\n    }\r\n    get description() {\r\n        return Object.freeze(packageJSON.description);\r\n    }\r\n    get dependencies() {\r\n        return Object.freeze(packageJSON.dependencies);\r\n    }\r\n    get optionalDependencies() {\r\n        return Object.freeze(packageJSON.optionalDependencies);\r\n    }\r\n    get repository() {\r\n        return Object.freeze(packageJSON.repository);\r\n    }\r\n    get authkey() {\r\n        return !!MeetupAPIkey;\r\n    }\r\n    set authkey(auth) {\r\n        MeetupAPIkey = auth || null;\r\n    }\r\n    get proxy() {\r\n        return !!(ProxyAgent && ProxyURI);\r\n    }\r\n    set proxy(uri) {\r\n        ProxyURI = (ProxyAgent && uri) ? uri : null;\r\n    }\r\n\r\n    [Symbol.iterator]() {\r\n        let index = -1,\r\n            commands = Object.keys(Meetup.prototype);\r\n        return {\r\n            next: () => ({\r\n                value: commands[++index],\r\n                done: index === commands.length\r\n            })\r\n        };\r\n    }\r\n\r\n    // OAUTH functions\r\n    getOAuthRequestToken(callback) {\r\n        let errMessage = (MeetupAPIkey && MeetupAPIkey.key && MeetupAPIkey.secret) ? null : 'No OAuth Keys';\r\n        errMessage = (OAuth) ? errMessage : 'No OAuth support';\r\n\r\n        if (errMessage) {\r\n            callback({\r\n                message: errMessage\r\n            }, null);\r\n        } else {\r\n            Meetup.oauth = new OAuth.OAuth(\r\n                'https://api.meetup.com/oauth/request/',\r\n                'https://api.meetup.com/oauth/access/',\r\n                MeetupAPIkey.key,\r\n                MeetupAPIkey.secret,\r\n                '1.0',\r\n                null,\r\n                'HMAC-SHA1'\r\n            );\r\n\r\n            return Meetup.oauth.getOAuthRequestToken({}, (error, oauth_token, oauth_token_secret) => {\r\n                let authorizeURL = null;\r\n                if (!error) {\r\n                    MeetupAPIkey.oauth_token = oauth_token;\r\n                    MeetupAPIkey.oauth_token_secret = oauth_token_secret;\r\n                    authorizeURL = 'http://www.meetup.com/authorize/?oauth_token=' + oauth_token;\r\n                }\r\n                callback(error, authorizeURL);\r\n            });\r\n        }\r\n    }\r\n\r\n    getOAuthAccessToken(oauth_verifier, callback) {\r\n        return Meetup.oauth.getOAuthAccessToken(\r\n            MeetupAPIkey.oauth_token,\r\n            MeetupAPIkey.oauth_token_secret,\r\n            oauth_verifier, (error, access_token, access_token_secret) => {\r\n                if (error) {\r\n                    callback(error);\r\n                } else {\r\n                    MeetupAPIkey.access_token = access_token;\r\n                    MeetupAPIkey.access_token_secret = access_token_secret;\r\n                    callback(null);\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    getOAuth2RequestToken(params, callback) {\r\n\r\n        let errMessage = (OAuth) ?\r\n            (MeetupAPIkey && MeetupAPIkey.key && MeetupAPIkey.secret) ? null : 'No OAuth Keys' :\r\n            'No OAuth support';\r\n\r\n        if (errMessage) {\r\n            callback({\r\n                message: errMessage\r\n            }, null);\r\n        } else {\r\n\r\n            Meetup.oauth2 = new OAuth.OAuth2(\r\n                MeetupAPIkey.key,\r\n                MeetupAPIkey.secret,\r\n                'https://secure.meetup.com/',\r\n                'oauth2/authorize',\r\n                'oauth2/access',\r\n                null\r\n            );\r\n\r\n            MeetupAPIkey.redirect = params.redirect;\r\n\r\n            let authURL = Meetup.oauth2.getAuthorizeUrl({\r\n                response_type: params.response_type || 'code',\r\n                redirect_uri: params.redirect\r\n            });\r\n\r\n            if (authURL) {\r\n                callback(null, authURL);\r\n            } else {\r\n                callback({\r\n                    message: 'No authURL return'\r\n                }, null);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    getOAuth2AccessToken(oauth_verifier, callback) {\r\n        return Meetup.oauth2.getOAuthAccessToken(\r\n            oauth_verifier, {\r\n                redirect_uri: MeetupAPIkey.redirect,\r\n                grant_type: 'authorization_code'\r\n            }, (error, access_token, refresh_token) => {\r\n                if (error) {\r\n                    callback(error);\r\n                } else {\r\n                    MeetupAPIkey.access_token = access_token;\r\n                    MeetupAPIkey.refresh_token = refresh_token;\r\n                    callback(null);\r\n                }\r\n            });\r\n    }\r\n\r\n    refreshOAuth2AccessToken(refresh_token, callback) {\r\n        return Meetup.oauth2.getOAuthAccessToken(\r\n            refresh_token || MeetupAPIkey.refresh_token, {\r\n                grant_type: 'refresh_token'\r\n            }, (error, access_token, refresh_token) => {\r\n                if (error) {\r\n                    callback(error);\r\n                } else {\r\n                    MeetupAPIkey.access_token = access_token;\r\n                    MeetupAPIkey.refresh_token = refresh_token;\r\n                    callback(null);\r\n                }\r\n            });\r\n    }\r\n\r\n}\r\n\r\n/*\r\n * Request functions\r\n */\r\n\r\nclass APIRequest {\r\n\r\n    // Preprocess params (used by 'Create Meetup prototypes')\r\n    static preProcess(obj) {\r\n        for (let i in obj) {\r\n            if (util.isArray(obj[i])) {\r\n                obj[i] = obj[i].join(',');\r\n            }\r\n        }\r\n    }\r\n\r\n    // Create request object (used by 'HTTP(S) request')\r\n    static create(method, url, params) {\r\n        // insert meetupAPIkey only if it exists  \r\n        params.key = (MeetupAPIkey && (typeof MeetupAPIkey === 'string')) && MeetupAPIkey;\r\n\r\n        // supply url vars\r\n        let thisUrl = URLfn.parse(url, true),\r\n            urlVars = thisUrl.pathname.match(/\\/:\\w+/g) || [];\r\n\r\n        // disable url.search to force URL.format to use url.query\r\n        thisUrl.search = null;\r\n\r\n        // replace url variables with parameters data and delete the populated properties from params \r\n        urlVars.forEach(\r\n            urlVar => {\r\n                thisUrl.pathname = thisUrl.pathname.replace(urlVar, '/' + params[urlVar.substr(2)]);\r\n                delete params[urlVar.substr(2)];\r\n            }\r\n        );\r\n\r\n        let req = request(method, URLfn.format(thisUrl))\r\n            .set('User-Agent', packageJSON.name + '/NodejsClientLib/' + packageJSON.version);\r\n\r\n        let agent = APIRequest.createProxyAgent(thisUrl);\r\n\r\n        req._agent = agent;\r\n\r\n        // return request object\r\n        return req;\r\n    }\r\n\r\n    // Stream event\r\n    static stream(req, callback) {\r\n        // create stream\r\n        req.pipe(JSONStream.parse()).pipe(\r\n            // return data on event\r\n            evStream.map(data => callback(data))\r\n        );\r\n    }\r\n\r\n    // Add Oauth params (used by 'HTTP(S) request')\r\n    static addOauthParams(req, params) {\r\n\r\n        if (typeof MeetupAPIkey === 'object') {\r\n\r\n            if (Meetup.oauth) {\r\n                //add oauth keys\r\n                req.sign(\r\n                    Meetup.oauth,\r\n                    params && params.access_token_key || MeetupAPIkey.access_token,\r\n                    params && params.access_token_secret || MeetupAPIkey.access_token_secret\r\n                );\r\n            }\r\n\r\n            if (Meetup.oauth2) {\r\n                //add oauth2 bearer\r\n                let bearer = params && params.access_token_key || MeetupAPIkey.access_token;\r\n                req.set('Authorization', 'Bearer ' + bearer);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // create proxy agent object\r\n    static createProxyAgent(url) {\r\n\r\n        let agent = null;\r\n\r\n        if (ProxyAgent && ProxyURI) {\r\n            // create an instance of the `ProxyAgent` class with the proxy server information \r\n            let opts = URLfn.parse(ProxyURI);\r\n\r\n            // IMPORTANT! Set the `secureEndpoint` option to `false` when connecting \r\n            //            over \"ws://\", but `true` when connecting over \"wss://\" \r\n            opts.secureEndpoint = (url.protocol) ? (url.protocol === 'wss:' || url.protocol === 'https:') : false;\r\n\r\n            agent = new ProxyAgent(opts);\r\n        }\r\n\r\n        return agent;\r\n\r\n    }\r\n\r\n    // HTTP(S) request\r\n    static http(endpoint, params, callback) {\r\n        // preprocess parameters\r\n        APIRequest.preProcess(params);\r\n\r\n        // create request\r\n        let req = APIRequest.create(endpoint.method, endpoint.resource, params);\r\n\r\n        // add OAUTH parameters for request\r\n        APIRequest.addOauthParams.call(this, req, params);\r\n\r\n        // add MultiPart photo upload\r\n        if (params.photo && endpoint.multipart_photo) {\r\n            req.attach('photo', params.photo);\r\n            delete params.photo;\r\n        }\r\n\r\n        // add query params &\r\n        req.query(params)\r\n            .set('Accept', '*/*')\r\n            .set('User-Agent', packageJSON.name + '/NodejsClientLib/' + packageJSON.version)\r\n            .buffer(true);\r\n\r\n        // execute the request\r\n        if (!endpoint.chunked) {\r\n            req.end(\r\n                (err, res) => {\r\n                    let response = null;\r\n\r\n                    if (!err) {\r\n                                            \r\n                        try {\r\n                        \tresponse = (!Object.keys(res.body).length) ? JSON.parse(res.text) : res.body;\r\n                        } catch(error) {\r\n\t\t\t\t\t\t\tresponse = null;\r\n\t\t\t\t\t\t\terr = error;\r\n                        }\r\n\r\n                        if (res.header['x-ratelimit-limit']) {\r\n                        \tresponse = response || {};\r\n                            response.ratelimit = {\r\n                                limit: res.header['x-ratelimit-limit'],\r\n                                remaining: res.header['x-ratelimit-remaining'],\r\n                                reset: res.header['x-ratelimit-reset']\r\n                            };\r\n                        }\r\n                    }\r\n\r\n                    callback(err || res.error, response);\r\n                }\r\n            );\r\n        }\r\n\r\n        // request funtions\r\n        this.abort = function() {\r\n            req.abort();\r\n            return this;\r\n        };\r\n\r\n        this.timeout = function(ms) {\r\n            ms = (params.callback) ? 0 : ms;\r\n            req.timeout(ms);\r\n            return this;\r\n        };\r\n\r\n        // pass callback to request events & create stream on chunked HTTP endpoints\r\n        this.on = function(event, callback) {\r\n            if (endpoint.chunked && event === 'data') {\r\n                APIRequest.stream(req, callback);\r\n            } else {\r\n                req.on(event, callback);\r\n            }\r\n            return this;\r\n        };\r\n\r\n        // listeners functions\r\n        ['removeListener', 'removeAllListeners', 'setMaxListeners'].forEach(fnct => {\r\n            this[fnct] = req[fnct];\r\n            return this;\r\n        });\r\n    }\r\n\r\n    // WebSocket request\r\n    static ws(endpoint, params) {\r\n        // preprocess parameters\r\n        APIRequest.preProcess(params);\r\n\r\n        // supply url vars\r\n        let url = URLfn.parse(endpoint.resource, true);\r\n\r\n        // add query to url\r\n        url.query = Object.assign(url.query, params);\r\n\r\n        // disable url.search to force URL.format to use url.query\r\n        url.search = null;\r\n\r\n        url = URLfn.format(url);\r\n\r\n\r\n        // define websocket options\r\n        let wsoptions = {},\r\n            agent = APIRequest.createProxyAgent(url);\r\n\r\n        wsoptions.agent = agent;\r\n\r\n        // create websocket connection\r\n        let ws = websocket(url, wsoptions);\r\n\r\n        // abort websocket stream\r\n        this.abort = function() {\r\n            ws.destroy();\r\n            return this;\r\n        };\r\n\r\n        // pass websocket events\r\n        this.on = function(event, callback) {\r\n            if (event === 'data') {\r\n                ws.on(event, data => {\r\n                    // parse buffer string to JSON and return to the callback\r\n                    callback(JSON.parse(data.toString()));\r\n                });\r\n            } else {\r\n                // pass call back to websocket event\r\n                ws.on(event, callback);\r\n            }\r\n            return this;\r\n        };\r\n\r\n        // listeners functions\r\n        let listeners = [\r\n            'removeListener',\r\n            'removeAllListeners',\r\n            'setMaxListeners'\r\n        ];\r\n        listeners.forEach(fnct => {\r\n            this[fnct] = ws[fnct];\r\n            return this;\r\n        });\r\n    }\r\n}\r\n\r\n/*\r\n * Create Meetup prototypes\r\n */\r\n\r\nObject.keys(endpoints).forEach(\r\n    key => {\r\n        Meetup.prototype[key] = function(params, callback) {\r\n\r\n            if (!endpoints[key].disable) {\r\n                // parse endpoint url and get the protocol (without ':')\r\n                let url = URLfn.parse(endpoints[key].resource),\r\n                    reqprotocol = url.protocol.replace(':', '');\r\n\r\n                // replace 'https' with 'http' to use the same request function\r\n                reqprotocol = (reqprotocol === 'https') ? 'http' : reqprotocol;\r\n\r\n                // replace 'wss' with 'ws' to use the same request function\r\n                reqprotocol = (reqprotocol === 'wss') ? 'ws' : reqprotocol;\r\n\r\n                // assign param function to callback\r\n                if ('function' === typeof params) {\r\n                    callback = params;\r\n                    params = {};\r\n                }\r\n\r\n                APIRequest[reqprotocol].call(this, endpoints[key], params, callback);\r\n\r\n            } else if (endpoints[key].comments) {\r\n\r\n                callback(endpoints[key].comments, null);\r\n\r\n            }\r\n\r\n            // return Meetup object\r\n            return this;\r\n        };\r\n    }\r\n);\r\n\r\n/*\r\n * Export new constructor wrapper\r\n */\r\n\r\nmodule.exports = function(params) {\r\n\r\n    // return new Meetup object on require\r\n    return new Meetup(params);\r\n\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-meetup-api/node_modules/meetup-api/lib/myUtils.js":"/*jslint node: true, maxcomplexity: 7 */\r\n'use strict';\r\n\r\n\r\nmodule.exports.requireOpt = function(modules, cb) {\r\n\tlet _loaded = {};\r\n\r\n\tif(Array.isArray(modules)) {\r\n\r\n\t\t_loaded = modules.reduce((_loaded, _module) => {\r\n\t\t\ttry {\r\n\t\t\t\t_loaded[_module] = require(_module);\r\n\t\t\t} catch(error) {\r\n\t\t\t\tif (Object.prototype.toString.call(_module) !== '[object String]') {\r\n\t\t\t\t\tthrow(error);\r\n\t\t\t\t}\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\treturn _loaded;\t\t\r\n\t\t}, {});\r\n\r\n\t} else {\r\n\r\n\t\ttry {\r\n\t\t\t_loaded[modules] = require(modules);\r\n\t\t} catch(error) {\r\n\t\t\tif (Object.prototype.toString.call(modules) !== '[object String]') {\r\n\t\t\t\tthrow(error);\r\n\t\t\t}\r\n\t\t\t_loaded[modules] = null;\t\r\n\t\t}\r\n\t}\r\n\r\n\treturn cb && cb(_loaded) || !cb && (_loaded.length === 1 && _loaded[0] || _loaded) || null;\r\n\r\n};","/home/travis/build/npmtest/node-npmtest-meetup-api/node_modules/meetup-api/tonicExample.js":"var _meetup = require('meetup-api')();\r\n\r\n_meetup.getLocations({\r\n\tquery: 'Córdoba'\r\n}, function (err, results) {\r\n    console.log(results);\r\n});\r\n\r\n_meetup.getCities({\r\n\tlat: -34.603722,\r\n\tlon: -58.381592,\r\n\tcountry: 'AR'\r\n}, function (err, results) {\r\n    console.log(results);\r\n});"}